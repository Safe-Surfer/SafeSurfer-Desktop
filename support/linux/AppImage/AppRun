#!/bin/bash

# SafeSurfer-Desktop - AppRun

#
# Copyright (C) 2018 Caleb Woodbine <info@safesurfer.co.nz>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

set -e

AppVersion="1.0.0b4"
AppBuild=4

if [ ! -z "$DEBUG" ]
then
	env
	set -x
fi

args="$1"
VENDORPREFIX=appimagekit

THIS="$0"

function dirResolve () {
# resolve a directory
path="$(dirname "$(readlink -f "${THIS}")")"
while [[ "$path" != "" && ! -e "$path/$1" ]]
do
	path=${path%/*}
done
}

if [ -z "$APPDIR" ]
then
	APPDIR=$(dirResolve "AppRun")
fi

export PATH="${APPDIR}/usr/bin:${PATH}"
DESKTOP_FILE="$APPDIR/SafeSurfer-Desktop.desktop"
BIN="$APPDIR/usr/lib64/SafeSurfer-Desktop/SafeSurfer-Desktop"

function atexit() {
# execute on trap
if [ -z "$APPIMAGE_EXIT_AFTER_INSTALL" ]
then
	if [[ $NUMBER_OF_ARGS -eq 0 ]]
	then
		exec "$BIN"
	else
		exec "$BIN" "${args[@]}"
	fi
fi
}

function error() {
# display an error
if [ -x /usr/bin/zenity ]
then
	LD_LIBRARY_PATH="" zenity --error --text "${1}" 2>/dev/null
elif [ -x /usr/bin/kdialog ]
then
	LD_LIBRARY_PATH="" kdialog --msgbox "${1}" 2>/dev/null
elif [ -x /usr/bin/Xdialog ]
then
	LD_LIBRARY_PATH="" Xdialog --msgbox "${1}" 2>/dev/null
else
	echo "${1}"
fi
exit 1
}

function yesno() {
# display a yes or no prompt
TITLE="$1"
TEXT="$2"
if [ -x /usr/bin/zenity ]
then
	LD_LIBRARY_PATH="" zenity --question --title="$TITLE" --text="$TEXT" --height=250 --width=400 --window-icon="${APPDIR}/ss-logo.png" 2>/dev/null || exit 0
elif [ -x /usr/bin/kdialog ]
then
	LD_LIBRARY_PATH="" kdialog --title "$TITLE" --yesno "$TEXT" || exit 0
elif [ -x /usr/bin/Xdialog ]
then
	LD_LIBRARY_PATH="" Xdialog --title "$TITLE" --clear --yesno "$TEXT" 10 80 || exit 0
else
	echo "zenity, kdialog, Xdialog missing. Skipping ${THIS}."
	exit 0
fi
}

function check_prevent() {
FILE=$1
if [ -e "$FILE" ]
then
	exit 0
fi
}

function uninstall_icons() {
# uninstall previous icons
for size in 16 24 32 48 64 128 256 512 1024
do
	xdg-icon-resource uninstall --noupdate --size "$size" "$VENDORPREFIX-SafeSurfer-Desktop"
done
}

function check_dep() {
# check if a given dependency is present
DEP="$1"
if [ -z "$(which $DEP)" ]
then
  	echo "$DEP is missing. Skipping ${THIS}."
  	[ "$REQ" = true ] && exit 1
fi
}

function check_file() {
# check if a file (or library) is present
FILE="$1"
PACKAGE="$2"
if [ ! -f "$FILE" ]
then
	echo "'$FILE' is not present. I need this to work. This file (or library) probably comes from the package '$PACKAGE'."
	exit 1
fi
}

REQ=true check_dep curl
REQ=true check_dep pkexec
check_file /usr/lib64/libgconf-2.so.4 gconf2

case "$args" in
	--remove-integration|-r)
		# remove desktop integration
		set -e
		uninstall_icons
		rm -f "$HOME"/.local/share/applications/"$VENDORPREFIX-SafeSurfer-Desktop.desktop"

		xdg-desktop-menu forceupdate
		# for MIME
		gtk-update-icon-cache

		echo "Integration was successfully removed."
		exit
		;;
	sscli)
		shift
		cp "${APPDIR}"/usr/bin/sscli /tmp/sscli-appimage
		ISAPPIMAGE=0 /tmp/sscli-appimage "$1"
		rm -f /tmp/sscli-appimage
		exit
		;;
	help|--help)
		echo "SafeSurfer-Desktop (AppImage) help menu"
		echo "---------------------------------------"
		echo
		echo "--remove-integration|-r	to remove desktop integration."
		echo "sscli			to use the sscli utility."
		exit
		;;
esac

trap atexit EXIT

# Exit immediately of one of these files is present
# (e.g., because the desktop environment wants to handle desktop integration itself)
check_prevent "$HOME/.local/share/$VENDORPREFIX/no_desktopintegration"
check_prevent "/usr/share/$VENDORPREFIX/no_desktopintegration"
check_prevent "/etc/$VENDORPREFIX/no_desktopintegration"

# Exit immediately if appimaged is running
pidof appimaged 2>/dev/null && exit 0

# Exit immediately if $DESKTOPINTEGRATION is not empty
if [ ! -z "$DESKTOPINTEGRATION" ]
then
	exit 0
fi

# Check whether dependencies are present in base system (we do not bundle these)
# http://cgit.freedesktop.org/xdg/desktop-file-utils/
check_dep desktop-file-install
check_dep xdg-icon-resource
check_dep xdg-mime
check_dep xdg-desktop-menu

if [ ! -f "$DESKTOP_FILE" ]
then
	echo "Desktop file is missing. Please run ${THIS} from within an AppImage."
	exit 0
fi

if [ -z "$APPIMAGE" ]
then
	APPIMAGE="$APPDIR/AppRun"
	# Not running from within an AppImage; hence using the AppRun for Exec=
fi

# Determine where the desktop file should be installed
if [[ $EUID -ne 0 ]]
then
	DESTINATION_DIR_DESKTOP="$HOME/.local/share/applications"
	SYSTEM_WIDE=""
else
	DESTINATION_DIR_DESKTOP="/usr/local/share/applications"
	# for xdg-mime and xdg-icon-resource
	SYSTEM_WIDE="--mode system"
fi

# Check if the desktop file is already there
# and if so, whether it points to the same AppImage
if [ -e "$DESTINATION_DIR_DESKTOP/$VENDORPREFIX-SafeSurfer-Desktop.desktop" ] && [ -z "$APPIMAGE_NO_UPGRADE" ]
then
	#INSTALLED_APP_VERSION=$(grep "^X-AppImage-BuildId=" "$DESTINATION_DIR_DESKTOP/$VENDORPREFIX-SafeSurfer-Desktop.desktop" | head -n 1 | cut -d " " -f 1)
	#APP_VERSION=$(grep "^X-AppImage-BuildId=" "$DESKTOP_FILE" | head -n 1 | cut -d " " -f 1)
	InstalledAppBuild=$(grep "X-AppImage-Build=" "$DESTINATION_DIR_DESKTOP/$VENDORPREFIX-SafeSurfer-Desktop.desktop" | cut -d '=' -f2)
	InstalledAppVersion=$(grep "X-AppImage-Version=" "$DESTINATION_DIR_DESKTOP/$VENDORPREFIX-SafeSurfer-Desktop.desktop" | cut -d '=' -f2)
	echo "installed-version: $InstalledAppVersion install-build: $InstalledAppBuild"
	if [ ! "$InstalledAppBuild" -lt "$AppBuild" ]
	then
		exit 0
	else
		if [ -z "$APPIMAGE_SILENT_INSTALL" ]
		then
			yesno "Upgrade" "You've launched a version ($AppVersion) which is newer than what is installed ($InstalledAppVersion) of SafeSurfer-Desktop.\\nWould you like to update the integration?"
			APPIMAGE_UPGRADE=true
		fi
		uninstall_icons
		rm -f "$HOME"/.local/share/applications/"$VENDORPREFIX-SafeSurfer-Desktop.desktop"
	fi
fi

# we ask the user only if we have found no reason to skip until here
if [ -z "$APPIMAGE_SILENT_INSTALL" ] && [ ! "$APPIMAGE_UPGRADE" = true ]
then
	yesno "Install" "Would you like to integrate $APPIMAGE with your system?\\n\\nThis will add it to your applications menu and install icons.\\nIf you don't do this you can still launch the application by double-clicking on the AppImage.\\n\\nPlease note you can remove integration by running '$APPIMAGE --remove-integration'"
fi

desktop-file-install --rebuild-mime-info-cache \
	--vendor=$VENDORPREFIX --set-key=Exec --set-value="\"${APPIMAGE}\" %U" \
	--set-key=X-AppImage-Comment --set-value="Generated by ${THIS}" \
	--set-key=X-AppImage-Version --set-value="$AppVersion" \
	--set-key=X-AppImage-Build --set-value="$AppBuild" \
	--set-icon="ss-logo" --set-key=TryExec --set-value=${APPIMAGE// /\\s} "$DESKTOP_FILE" \
	--dir "$DESTINATION_DIR_DESKTOP" \
	--mode=755

uninstall_icons

echo "STATUS: Installing icons to user's home directory."

# Install the icon files for the application
for size in 16 24 32 48 64 128 256 512 1024
do
	xdg-icon-resource install --noupdate --context apps --size "$size" "$APPDIR/usr/share/icons/hicolor/${size}x${size}/apps/ss-logo.png" "$VENDORPREFIX-SafeSurfer-Desktop"
done

# force update the icon cache
xdg-icon-resource forceupdate

# Install the icon files for the mime type;
ICONS=$(find "${APPDIR}/usr/share/icons/" -wholename "*/*/*.png" 2>/dev/null || true)
for ICON in $ICONS
do
	ICON_SIZE=$(echo "${ICON}" | rev | cut -d "/" -f 3 | rev | cut -d "x" -f 1)
	xdg-icon-resource install --context mimetypes --size "${ICON_SIZE}" "${ICON}" $(basename "$ICON" | sed -e 's/.png//g')
done

xdg-desktop-menu forceupdate
# for MIME
gtk-update-icon-cache

echo "STATUS: Done, now launching app..."